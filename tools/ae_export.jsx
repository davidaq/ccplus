var saveDir = '/Users/apple/Desktop';var Export = function() {    this.comp = {};    for(var i = 1; i <= app.project.numItems; i++) {        var item = app.project.item(i);        if('[object CompItem]' == item.toString()) {            if(this.comp[item.name]) {                throw "Duplicate composition name: " + item.name;            }            this.comp[item.name] = item;        }    }};Export.prototype.exportTo = function(filePath) {    this.tmlFile = new File(filePath);    this.tmlFile.open('w');    try {        if(!this.comp.MAIN) {            throw "Main composition doesn't exist";        }        this.exportList = ['MAIN'];        var tml = {version:0.01, main:'MAIN', compositions:{}};        while(this.exportList.length > 0) {            var compName = this.exportList.pop();            tml.compositions[compName] = this.exportComp(this.comp[compName]);        }        this.tmlFile.write(obj2str(tml));    } finally {        this.tmlFile.close();    }};Export.prototype.exportComp = function(comp) {    var ret = {};    ret.resolution = {        width: comp.width,        height: comp.height    };    ret.duration = comp.duration;    ret.layers = [];    for(var i = 1; i <= comp.layers.length; i++) {        ret.layers.push(this.exportLayer(comp.layers[i]));    }    return ret;};Export.prototype.exportLayer = function(layer) {    var ret = {};    var source = layer.source;    var type = source.toString();    if('[object CompItem]' == type) {        this.exportList.push(source.name);        ret.uri = 'composition://' + source.name;    } else if('[object FootageItem]' == type) {        ret.uri = 'file://' + relPath(source.file.fullName);    }    ret.time = layer.inPoint;    ret.duration = layer.outPoint - layer.inPoint;    ret.start = layer.outPoint - layer.startTime;    ret.last = ret.duration;    ret.properties = {};    // pos anchor scale rotate    ret.properties.transform = {};    for(var t = ret.time; t < layer.outPoint; t += 0.1) {        var pos = layer.property('Position').valueAtTime(t, false);        var anchor = layer.property('Anchor Point').valueAtTime(t, false);        var scale = layer.property('Scale').valueAtTime(t, false);        var rotate = layer.property('Rotation').valueAtTime(t, false);        if(!rotate)            rotate = 0;        ret.properties.transform['' + t] = [            pos[1], pos[0],            anchor[1], anchor[0],            scale[1] * 0.01, scale[0] * 0.01,            rotate        ];    }        return ret;};function __main__() {    try {        new Export().exportTo(projDir + '/test.tml');    } catch (e) {        alert(e);    }}// Utilitiesvar projDir = app.project.file.fullName;var p = projDir.lastIndexOf('/');projDir = projDir.substr(0, p + 1);function relPath(pathName) {    if(pathName.substr(0, projDir.length) == projDir)        pathName = pathName.substr(projDir.length);    return pathName;}function obj2str(obj) {    function _obj2str(obj) {        if(obj === undefined)            return 'null';        else if(obj === false)            return 'false';        else if(obj === true)            return 'true';        var type = typeof(obj);        if(type == 'number') {            return obj;        } else if(type == 'string') {            return '"' + obj + '"';        } else if(type == 'object') {            var ret = '';            if(obj.length !== undefined) {                for(k in obj) {                    ret += ',' + _obj2str(obj[k]);                }                return '[' + ret + ']';            } else if('[object Object]' == obj.toString()) {                for(k in obj) {                    ret += ',"' + k + '":' + _obj2str(obj[k]);                }                return '{' + ret + '}';            }        }    }    var ret = _obj2str(obj);    ret = ret.replace(/,/g, ",\n");    ret = ret.replace(/([\[\{]),/g, "$1");    return ret;    ret = ret.replace(/([\]\}])/g, "\n$1");    ret = ret.replace(/\[[\n\s]*\]/g, '[]');    var lines = ret.split("\n");    ret = '';    var sp = '';    for(k in lines) {        var line = lines[k];        if(line.indexOf(']') > -1 || line.indexOf('}') > -1) {            sp = sp.substr(4);        }        ret += sp + line + "\n";        if(line.indexOf('[') > -1 || line.indexOf('{') > -1) {            sp += "    ";        }    }    return ret;}__main__();